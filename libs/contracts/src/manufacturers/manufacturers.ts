// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: proto/products/manufacturers.proto

/* eslint-disable */
import { Empty } from '@app/common/interfaces';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Manufacturer } from './manufacturer.dto';
import { CreateManufacturerDto } from './create-manufacturer.dto';
import { UpdateManufacturerDto } from './update-manufacturer.dto';

export const protobufPackage = 'products';

export interface FindOneManufacturerDto {
	id: string;
}

export interface RemoveManufacturerDto {
	id: string;
}

export interface PermanentlyRemoveManufacturerDto {
	id: string;
}

export interface Manufacturers {
	count: number;
	manufacturers: Manufacturer[];
}

export const PRODUCTS_PACKAGE_NAME = 'products';

export interface ManufacturersServiceClient {
	create(request: CreateManufacturerDto): Observable<Manufacturer>;

	findOne(request: FindOneManufacturerDto): Observable<Manufacturer>;

	findAll(request: Empty): Observable<Manufacturers>;

	update(request: UpdateManufacturerDto): Observable<Manufacturer>;

	remove(request: RemoveManufacturerDto): Observable<Empty>;

	permanentlyRemove(
		request: PermanentlyRemoveManufacturerDto,
	): Observable<Empty>;
}

export interface ManufacturersServiceController {
	create(
		request: CreateManufacturerDto,
	): Promise<Manufacturer> | Observable<Manufacturer> | Manufacturer;

	findOne(
		request: FindOneManufacturerDto,
	): Promise<Manufacturer> | Observable<Manufacturer> | Manufacturer;

	findAll(
		request: Empty,
	): Promise<Manufacturers> | Observable<Manufacturers> | Manufacturers;

	update(
		request: UpdateManufacturerDto,
	): Promise<Manufacturer> | Observable<Manufacturer> | Manufacturer;

	remove(
		request: RemoveManufacturerDto,
	): Promise<Empty> | Observable<Empty> | Empty;

	permanentlyRemove(
		request: PermanentlyRemoveManufacturerDto,
	): Promise<Empty> | Observable<Empty> | Empty;
}

export function ManufacturersServiceControllerMethods() {
	return function (constructor: Function) {
		const grpcMethods: string[] = [
			'create',
			'findOne',
			'findAll',
			'update',
			'remove',
			'permanentlyRemove',
		];
		for (const method of grpcMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcMethod('ManufacturersService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
		const grpcStreamMethods: string[] = [];
		for (const method of grpcStreamMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcStreamMethod('ManufacturersService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
	};
}

export const MANUFACTURERS_SERVICE_NAME = 'ManufacturersService';
