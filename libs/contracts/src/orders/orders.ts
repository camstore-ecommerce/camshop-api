// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: proto/orders/orders.proto

/* eslint-disable */
import { Empty } from '@app/common/interfaces';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { User } from '../auth';
import { Product } from '../products';
import { Address } from '../addresses';

export const protobufPackage = 'orders';

export interface FindOneOrderDto {
	id: string;
}

export interface FindAllOrderByUserDto {
	user_id: string;
}

export interface FindOneOrderByUserDto {
	id: string;
	user_id: string;
}

export interface CreateOrderDto {
	user_id: string;
	order_items: OrderItems[];
	address_id: string;
	shipping_cost: number;
	shipping_method: string;
	tax: number;
	discount: number;
}

export interface UpdateOrderDto {
	id: string;
	status: string;
	user_id: string;
	address_id: string;
	shipping_cost: number;
	shipping_method: string;
	tax: number;
	discount: number;
	notes: string;
	canceled_reason: string;
	refund_details: string;
}

export interface RemoveOrderDto {
	id: string;
}

export interface PermanentlyRemoveOrderDto {
	id: string;
}

export interface Order {
	id: string;
	user_id: string;
	status: string;
	order_date: Date | undefined;
	updated_at: Date | undefined;
	deleted_at: Date | undefined;
	order_items: OrderItems[];
	address_id: string;
	shipping_cost: number;
	shipping_method: string;
	sub_total: number;
	tax: number;
	discount: number;
	total: number;
	notes: string;
	canceled_reason: string;
	refund_details: string;
}

export interface OrderItems {
	order_id: string;
	product_id: string;
	qty: number;
	price: number;
	total_price: number;
	options: any;
}

export interface OrdersResponse {
	count: number;
	orders: OrderResponse[];
}

export interface OrderResponse {
	id: string;
	user: User;
	status: string;
	order_date: Date | undefined;
	updated_at: Date | undefined;
	deleted_at: Date | undefined;
	order_items: OrderItemsResponse[];
	address: Address;
	shipping_cost: number;
	shipping_method: string;
	sub_total: number;
	tax: number;
	discount: number;
	total: number;
	notes: string;
	canceled_reason: string;
	refund_details: string;
}

export interface OrderItemsResponse {
	order_id: string;
	product: Product;
	qty: number;
	price: number;
	total_price: number;
	options: any;
}

export const ORDERS_PACKAGE_NAME = 'orders';

export interface OrdersServiceClient {
	findOne(request: FindOneOrderDto): Observable<OrderResponse>;

	findAll(request: Empty): Observable<OrdersResponse>;

	findAllByUser(request: FindAllOrderByUserDto): Observable<OrdersResponse>;

	findOneByUser(request: FindOneOrderByUserDto): Observable<OrderResponse>;

	create(request: CreateOrderDto): Observable<OrderResponse>;

	update(request: UpdateOrderDto): Observable<OrderResponse>;

	remove(request: RemoveOrderDto): Observable<Empty>;

	permanentlyRemove(request: PermanentlyRemoveOrderDto): Observable<Empty>;
}

export interface OrdersServiceController {
	findOne(
		request: FindOneOrderDto,
	): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

	findAll(
		request: Empty,
	): Promise<OrdersResponse> | Observable<OrdersResponse> | OrdersResponse;

	findAllByUser(
		request: FindAllOrderByUserDto,
	): Promise<OrdersResponse> | Observable<OrdersResponse> | OrdersResponse;

	findOneByUser(
		request: FindOneOrderByUserDto,
	): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

	create(
		request: CreateOrderDto,
	): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

	update(
		request: UpdateOrderDto,
	): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

	remove(request: RemoveOrderDto): Promise<Empty> | Observable<Empty> | Empty;

	permanentlyRemove(
		request: PermanentlyRemoveOrderDto,
	): Promise<Empty> | Observable<Empty> | Empty;
}

export function OrdersServiceControllerMethods() {
	return function (constructor: Function) {
		const grpcMethods: string[] = [
			'findOne', 'findAll', 'findAllByUser',
			'findOneByUser', 'create', 'update', 'remove',
			'permanentlyRemove',
		];
		for (const method of grpcMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcMethod('OrdersService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
		const grpcStreamMethods: string[] = [];
		for (const method of grpcStreamMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcStreamMethod('OrdersService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
	};
}

export const ORDERS_SERVICE_NAME = 'OrdersService';
