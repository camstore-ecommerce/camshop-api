// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: proto/users/users.proto

/* eslint-disable */
import { Empty } from '@app/common/interfaces';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { User, Users } from './user.dto';
import { UpdateUserDto } from './update-user.dto';

export const protobufPackage = 'users';

export interface FindOneUserDto {
	id: string;
}

export interface FindUsersByIds{
	ids: string[];
}

export interface UpdateUserProfileDto {
	id: string;
	first_name: string;
	last_name: string;
	phone: string;
	gender: unknown;
	birth_date: Date;
	profile_pic: string;
}

export interface RemoveUserDto {
	id: string;
}

export interface PermanentlyRemoveUserDto {
	id: string;
}

export interface ValidateUserDto {
	email: string;
	password: string;
}

export const USERS_PACKAGE_NAME = 'users';

export interface UsersServiceClient {
	findAll(request: Empty): Observable<Users>;

	findOne(request: FindOneUserDto): Observable<User>;

	findByIds(request: FindUsersByIds): Observable<Users>;

	update(request: UpdateUserDto): Observable<User>;

	updateUserProfile(request: UpdateUserProfileDto): Observable<User>;

	remove(request: RemoveUserDto): Observable<Empty>;

	permanentlyRemove(request: PermanentlyRemoveUserDto): Observable<Empty>;

	validateUser(request: ValidateUserDto): Observable<User>;
}

export interface UsersServiceController {
	findAll(request: Empty): Promise<Users> | Observable<Users> | Users;

	findOne(request: FindOneUserDto): Promise<User> | Observable<User> | User;

	findByIds(request: FindUsersByIds): Promise<Users> | Observable<Users> | Users;

	update(request: UpdateUserDto): Promise<User> | Observable<User> | User;

	remove(request: RemoveUserDto): Promise<Empty> | Observable<Empty> | Empty;

	permanentlyRemove(
		request: PermanentlyRemoveUserDto,
	): Promise<Empty> | Observable<Empty> | Empty;

	validateUser(
		request: ValidateUserDto,
	): Promise<User> | Observable<User> | User;
}

export function UsersServiceControllerMethods() {
	return function (constructor: Function) {
		const grpcMethods: string[] = [
			'findAll',
			'findOne',
			'findByIds',
			'update',
			'remove',
			'permanentlyRemove',
			'validateUser',
		];
		for (const method of grpcMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcMethod('UsersService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
		const grpcStreamMethods: string[] = [];
		for (const method of grpcStreamMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcStreamMethod('UsersService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
	};
}

export const USERS_SERVICE_NAME = 'UsersService';
