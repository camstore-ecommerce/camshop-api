// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: proto/products/products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Empty, Pagination } from '@app/common/interfaces';
import { CreateProductDto } from './create-product.dto';
import { UpdateProductDto } from './update-product.dto';
import { Product, Products } from './product.dto';
import { FilterProductDto } from './filter-product.dto';

export const protobufPackage = 'products';

export interface ProductId {
	id: string;
}
export interface FindByIdsDto {
	ids: string[];
}

export const PRODUCTS_PACKAGE_NAME = 'products';

export interface ProductsServiceClient {
	create(request: CreateProductDto): Observable<Product>;

	findOne(request: ProductId): Observable<Product>;

	findByIds(request: FindByIdsDto): Observable<Products>;

	findAll(request: Pagination): Observable<Products>;

	filter(request: FilterProductDto): Observable<Products>;

	update(request: UpdateProductDto): Observable<Product>;

	remove(request: ProductId): Observable<Empty>;

	permanentlyRemove(request: ProductId): Observable<Empty>;
}

export interface ProductsServiceController {
	create(
		request: CreateProductDto,
	): Promise<Product> | Observable<Product> | Product;

	findOne(
		request: ProductId,
	): Promise<Product> | Observable<Product> | Product;

	findByIds(
		request: FindByIdsDto,
	): Promise<Products> | Observable<Products> | Products;

	findAll(request: Pagination): Promise<Products> | Observable<Products> | Products;

	filter(request: FilterProductDto): Promise<Products> | Observable<Products> | Products;

	update(
		request: UpdateProductDto,
	): Promise<Product> | Observable<Product> | Product;

	remove(request: ProductId): Promise<Empty> | Observable<Empty> | Empty;

	permanentlyRemove(
		request: ProductId,
	): Promise<Empty> | Observable<Empty> | Empty;
}

export function ProductsServiceControllerMethods() {
	return function (constructor: Function) {
		const grpcMethods: string[] = [
			'create',
			'findOne',
			'findByIds',
			'findAll',
			'filter',
			'update',
			'remove',
			'permanentlyRemove',
		];
		for (const method of grpcMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcMethod('ProductsService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
		const grpcStreamMethods: string[] = [];
		for (const method of grpcStreamMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(
				constructor.prototype,
				method,
			);
			GrpcStreamMethod('ProductsService', method)(
				constructor.prototype[method],
				method,
				descriptor,
			);
		}
	};
}

export const PRODUCTS_SERVICE_NAME = 'ProductsService';
