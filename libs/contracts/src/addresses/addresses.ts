// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: proto/users/addresses.proto

/* eslint-disable */
import { Empty } from "@app/common/interfaces";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export interface Addresses {
  count: number;
  addresses: Address[];
}

export interface Address {
  id: string;
  user_id: string;
  address: string;
  city: string;
  state: string;
  country: string;
  postal_code: string;
  is_primary: boolean;
}

export interface CreateAddressDto {
  user_id: string;
  address: string;
  city: string;
  state: string;
  country: string;
  postal_code: string;
  is_primary: boolean;
}

export interface FindAllAddressDto {
  user_id: string;
}

export interface FindOneAddressDto {
  id: string;
  user_id: string;
}

export interface UpdateAddressDto {
  id: string;
  user_id: string;
  address: string;
  city: string;
  state: string;
  country: string;
  postal_code: string;
  is_primary: boolean;
}

export interface RemoveAddressDto {
  id: string;
  user_id: string;
}

export const USERS_PACKAGE_NAME = "users";

export interface AddressesServiceClient {
  create(request: CreateAddressDto): Observable<Address>;

  findAll(request: FindAllAddressDto): Observable<Addresses>;

  findOne(request: FindOneAddressDto): Observable<Address>;

  update(request: UpdateAddressDto): Observable<Address>;

  remove(request: RemoveAddressDto): Observable<Empty>;
}

export interface AddressesServiceController {
  create(request: CreateAddressDto): Promise<Address> | Observable<Address> | Address;

  findAll(request: FindAllAddressDto): Promise<Addresses> | Observable<Addresses> | Addresses;

  findOne(request: FindOneAddressDto): Promise<Address> | Observable<Address> | Address;

  update(request: UpdateAddressDto): Promise<Address> | Observable<Address> | Address;

  remove(request: RemoveAddressDto): Promise<Empty> | Observable<Empty> | Empty;
}

export function AddressesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findAll", "findOne", "update", "remove"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AddressesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AddressesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ADDRESSES_SERVICE_NAME = "AddressesService";
